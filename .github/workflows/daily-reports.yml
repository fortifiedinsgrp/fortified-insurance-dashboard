name: Daily Report Scheduler

on:
  schedule:
    # Run at 8:00 AM Eastern Daylight Time (12:00 PM UTC)
    - cron: '0 12 * * *'
  workflow_dispatch:  # Allows manual triggering for testing

jobs:
  send-reports:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create secrets file
      env:
        SPREADSHEET_ID: ${{ secrets.SPREADSHEET_ID }}
        GCP_TYPE: ${{ secrets.GCP_TYPE }}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_PRIVATE_KEY_ID: ${{ secrets.GCP_PRIVATE_KEY_ID }}
        GCP_PRIVATE_KEY: ${{ secrets.GCP_PRIVATE_KEY }}
        GCP_CLIENT_EMAIL: ${{ secrets.GCP_CLIENT_EMAIL }}
        GCP_CLIENT_ID: ${{ secrets.GCP_CLIENT_ID }}
        GCP_AUTH_URI: ${{ secrets.GCP_AUTH_URI }}
        GCP_TOKEN_URI: ${{ secrets.GCP_TOKEN_URI }}
        GCP_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.GCP_AUTH_PROVIDER_X509_CERT_URL }}
        GCP_CLIENT_X509_CERT_URL: ${{ secrets.GCP_CLIENT_X509_CERT_URL }}
      run: |
        mkdir -p .streamlit
        echo "Creating secrets.toml..."
        cat > .streamlit/secrets.toml << 'EOF'
        SPREADSHEET_ID = "$SPREADSHEET_ID"
        
        [gcp_service_account]
        type = "$GCP_TYPE"
        project_id = "$GCP_PROJECT_ID"
        private_key_id = "$GCP_PRIVATE_KEY_ID"
        private_key = """$GCP_PRIVATE_KEY"""
        client_email = "$GCP_CLIENT_EMAIL"
        client_id = "$GCP_CLIENT_ID"
        auth_uri = "$GCP_AUTH_URI"
        token_uri = "$GCP_TOKEN_URI"
        auth_provider_x509_cert_url = "$GCP_AUTH_PROVIDER_X509_CERT_URL"
        client_x509_cert_url = "$GCP_CLIENT_X509_CERT_URL"
        universe_domain = "googleapis.com"
        EOF
        echo "âœ… Secrets file created successfully"
        
    - name: Configure email settings
      env:
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        SENDER_NAME: ${{ secrets.SENDER_NAME }}
      run: |
        python << 'EOF'
        import json
        import os
        
        # Create email settings for the scheduler using environment variables
        settings = {
            "email_settings": {
                "smtp_server": os.environ.get('SMTP_SERVER', 'smtp.gmail.com'),
                "smtp_port": int(os.environ.get('SMTP_PORT', '587')),
                "use_tls": True,
                "sender_email": os.environ.get('SENDER_EMAIL', ''),
                "sender_password": os.environ.get('SMTP_PASSWORD', ''),
                "sender_name": os.environ.get('SENDER_NAME', 'Fortified Insurance Reports')
            }
        }
        
        with open('settings.json', 'w') as f:
            json.dump(settings, f, indent=2)
        
        print("âœ… Email settings configured successfully")
        EOF
        
    - name: Check for due reports and send
      run: |
        echo "ğŸš€ Checking for due reports..."
        python standalone_scheduler.py --status
        echo "ğŸ“§ Running scheduler to send any due reports..."
        python standalone_scheduler.py
        echo "âœ… Scheduler run completed" 